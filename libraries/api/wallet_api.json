{
  "category": "Wallet Methods",
  "methods" :
    [
      {
        "method_name": "wallet_get_info",
        "description": "Extra information about the wallet.",
        "return_type": "json_object",
        "parameters" : 
          [
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_open_file",
        "description": "Opens the wallet at the given path",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "wallet_file", 
              "type" : "filename", 
              "description" : "the full path and filename of the wallet to open",
              "example" : "/path/to/wallet.dat"
            }
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_open",
        "description": "Opens the wallet of the given name",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "wallet_name", 
              "type" : "wallet_name", 
              "description" : "the name of the wallet to open"
            }
          ],
        "prerequisites" : ["json_authenticated"],
        "aliases" : ["open"]
      },
      {
        "method_name": "wallet_create",
        "description": "Creates a wallet with the given name",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "wallet_name", 
              "type" : "wallet_name", 
              "description" : "name of the wallet to create"
            },
            { 
              "name" : "new_passphrase", 
              "type" : "new_passphrase", 
              "description" : "a passphrase for encrypting the wallet"
            },
            { 
              "name" : "brain_key", 
              "type" : "new_passphrase", 
              "description" : "a strong passphrase that will be used to generate all private keys, defaults to a large random number",
              "default_value" : ""
            }
          ],
        "prerequisites" : ["json_authenticated"],
        "aliases" : ["create"]
      },
      {
        "method_name": "wallet_get_name",
        "description": "Returns the wallet name passed to wallet_open",
        "return_type": "optional_wallet_name",
        "parameters" : [],
        "is_const" : true,
        "prerequisites" : ["no_prerequisites"]
      },
      {
        "method_name": "wallet_import_private_key",
        "description": "Loads the private key into the specified account. Returns which account it was actually imported to.",
        "return_type": "account_name",
        "parameters" : [
           {
              "name" : "wif_key",
              "type" : "wif_private_key",
              "description" : "A private key in bitcoin Wallet Import Format (WIF)"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account the key should be imported into, if null then the key must belong to an active account",
              "default_value" : null
           },
           {
              "name" : "create_new_account",
              "type" : "bool",
              "description" : "If true, the wallet will attempt to create a new account for the name provided rather than import the key into an existing account",
              "default_value" : false
           },
           {
              "name" : "rescan",
              "type" : "bool",
              "description" : "If true, the wallet will rescan the blockchain looking for transactions that involve this private key",
              "default_value" : false
           }
        ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["import_key"]
      },
      {
        "method_name": "wallet_import_bitcoin",
        "description": "Imports a Bitcoin Core or BitShares PTS wallet",
        "return_type": "void",
        "parameters" : [
           {
              "name" : "wallet_filename",
              "type" : "filename",
              "description" : "the Bitcoin/PTS wallet file path"
           },
           {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the imported wallet's password"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the account to receive the contents of the wallet"
           }
        ],
        "prerequisites" : ["wallet_unlocked"]
      },
      {
        "method_name": "wallet_import_armory",
        "description": "Imports an Armory wallet",
        "return_type": "void",
        "parameters" : [
           {
              "name" : "wallet_filename",
              "type" : "filename",
              "description" : "the Armory wallet file path"
           },
           {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the imported wallet's password"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the account to receive the contents of the wallet"
           }
        ],
        "prerequisites" : ["wallet_unlocked"]
      },
      {
        "method_name": "wallet_import_electrum",
        "description": "Imports an Electrum wallet",
        "return_type": "void",
        "parameters" : [
           {
              "name" : "wallet_filename",
              "type" : "filename",
              "description" : "the Electrum wallet file path"
           },
           {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the imported wallet's password"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the account to receive the contents of the wallet"
           }
        ],
        "prerequisites" : ["wallet_unlocked"]
      },
      {
        "method_name": "wallet_import_multibit",
        "description": "Imports a Multibit wallet",
        "return_type": "void",
        "parameters" : [
           {
              "name" : "wallet_filename",
              "type" : "filename",
              "description" : "the Multibit wallet file path"
           },
           {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the imported wallet's password"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the account to receive the contents of the wallet"
           }
        ],
        "prerequisites" : ["wallet_unlocked"]
      },
      {
          "method_name": "wallet_import_keyhotee",
          "description": "Create the key from keyhotee config and import it to the wallet, creating a new account using this key",
          "return_type": "void",
          "parameters" : [
          {
              "name" : "firstname",
              "type" : "name",
              "description" : "first name in keyhotee profile config, for salting the seed of private key"
          },
          {
              "name" : "middlename",
              "type" : "name",
              "description" : "middle name in keyhotee profile config, for salting the seed of private key"
          },
          {
              "name" : "lastname",
              "type" : "name",
              "description" : "last name in keyhotee profile config, for salting the seed of private key"
          },
          {
              "name" : "brainkey",
              "type" : "brainkey",
              "description" : "brainkey in keyhotee profile config, for salting the seed of private key"
          },
          {
              "name" : "keyhoteeid",
              "type" : "keyhoteeid",
              "description" : "using keyhotee id as account name"
          }
          ],
          "prerequisites" : ["wallet_unlocked"]
      },
      {
        "method_name": "wallet_close",
        "description": "Closes the curent wallet if one is open",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["no_prerequisites"],
        "aliases" : ["close"]
      },
      {
        "method_name": "wallet_export_to_json",
        "description": "Exports the current wallet to a JSON file",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "json_filename", 
              "type" : "filename", 
              "description" : "the full path and filename of JSON file to generate",
              "example" : "/path/to/exported_wallet.json"
            }
          ],
        "is_const" : true,
        "prerequisites" : ["wallet_open"]
      },
      {
        "method_name": "wallet_create_from_json",
        "description": "Creates a new wallet from an exported JSON file",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "json_filename", 
              "type" : "filename", 
              "description" : "the full path and filename of JSON wallet to import",
              "example" : "/path/to/exported_wallet.json"
            },
            { 
              "name" : "wallet_name", 
              "type" : "wallet_name", 
              "description" : "name of the wallet to create"
            },
            {
              "name" : "imported_wallet_passphrase",
              "type" : "passphrase",
              "description" : "passphrase of the imported wallet"
            }
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_account_transaction_history",
        "description": "Lists transaction history for the specified account",
        "return_type": "pretty_transactions",
        "parameters" : 
          [
            { 
              "name" : "account_name",
              "type" : "string",
              "description" : "the name of the account for which the transaction history will be returned, \"\" for all accounts",
              "example" : "alice",
              "default_value" : ""
            },
            {
               "name" : "start_block_num",
               "type" : "uint32_t",
               "description" : "the earliest block number to list transactions from; 0 to include all transactions starting from genesis",
               "default_value" : 0
            },
            {
               "name" : "end_block_num",
               "type" : "uint32_t",
               "description" : "the latest block to list transaction from; -1 to include all transactions ending at the head block",
               "default_value" : -1
            },
            {
               "name" : "asset_symbol",
               "type" : "string",
               "description" : "only include transactions involving the specified asset, or \"\" to include all",
               "default_value" : ""
            }
        ],
        "prerequisites" : ["wallet_open"],
        "is_const": true,
        "aliases" : ["history"]
      },
      {
        "method_name": "wallet_clear_pending_transactions",
        "description": "Clear \"stuck\" pending transactions from the wallet.",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["wallet_open"],
        "aliases" : []
      },
      {
        "method_name": "wallet_get_pending_transaction_errors",
        "description": "Return any errors for your currently pending transactions",
        "return_type": "map<transaction_id_type, fc::exception>",
        "parameters" :
        [
            {
              "name" : "filename",
              "type" : "string",
              "description" : "filename to save pending transaction errors to",
              "default_value" : ""
            }
        ],
        "prerequisites" : ["wallet_open"],
        "is_const": true,
        "aliases" : []
      },
      {
        "method_name": "wallet_lock",
        "description": "Lock the private keys in wallet, disables spending commands until unlocked",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["lock"]
      },
      {
        "method_name": "wallet_unlock",
        "description": "Unlock the private keys in the wallet to enable spending operations",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "timeout", 
              "type" : "uint32_t",
              "description" : "the number of seconds to keep the wallet unlocked"
            },
            { 
              "name" : "passphrase", 
              "type" : "passphrase", 
              "description" : "the passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["unlock"]
      },
      {
        "method_name": "wallet_change_passphrase",
        "description": "Change the password of the current wallet",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "passphrase", 
              "type" : "passphrase", 
              "description" : "the passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "detailed_description" : "This will change the wallet's spending passphrase, please make sure you remember it."
      },
      {
        "method_name": "wallet_list",
        "description": "Return a list of wallets in the current data directory",
        "return_type": "wallet_name_array",
        "parameters" : [],
        "prerequisites" : ["json_authenticated"],
        "is_const": true,
        "aliases" : []
      },
      {
        "method_name": "wallet_account_create",
        "description": "Add new account for receiving payments",
        "return_type": "public_key",
        "parameters" : 
          [
            { 
              "name" : "account_name", 
              "type" : "account_name", 
              "description" : "the name you will use to refer to this receive account",
              "enable_autocomplete" : false
            },
            { 
              "name" : "private_data", 
              "type" : "json_variant", 
              "description" : "Extra data to store with this account record",
              "default_value" : null
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : [ "wallet_create_account", "create_account" ]
      },
      {
        "method_name": "wallet_account_set_favorite",
        "description": "Updates the favorited status of the specified account",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account to set favorited status on"
            },
            {
              "name" : "is_favorite",
              "type" : "bool",
              "description" : "true if account should be marked as a favorite; false otherwise",
              "default_value" : true
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : [ "favor" ]
      },
      {
        "method_name": "wallet_approve_delegate",
        "description": "Updates your approval for the specified delegate",
        "return_type": "bool",
        "parameters" : 
          [
            { 
              "name" : "delegate_name", 
              "type" : "account_name", 
              "description" : "the name of the delegate to set approval for"
            },
            { 
              "name" : "approved",
              "type" : "bool",
              "description" : "true to approve and false otherwise",
              "default_value" : true
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : [ "approve", "set_approval" ]
      },
      {
        "method_name": "wallet_add_contact_account",
        "description": "Add new account for sending payments",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "account_name", 
              "type" : "account_name", 
              "description" : "the name you will use to refer to this sending account",
              "enable_autocomplete" : false
            },
            { 
              "name" : "account_key", 
              "type" : "public_key", 
              "description" : "the key associated with this sending account"
            }
          ],
        "prerequisites" : ["wallet_open"]
      },
      {
        "method_name": "wallet_multipart_transfer",
        "description": "Sends given amount to the given address, assumes shares in DAC.  This transfer will occur using multiple transactions as necessary to maximize your privacy, but will be more costly.",
        "return_type": "signed_transaction_array",
        "parameters" : 
          [
            {
              "name" : "amount_to_transfer", 
              "type" : "real_amount", 
              "description" : "the amount of shares to transfer, will be multiplied by the precision associated by asset_symbol"
            },
            {
              "name" : "asset_symbol", 
              "type" : "asset_symbol", 
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name", 
              "type" : "sending_account_name", 
              "description" : "the source account(s) to draw the shares from"
            },
            {
              "name" : "to_account_name", 
              "type" : "receive_account_name", 
              "description" : "the account to transfer the shares to"
            },
            {
              "name" : "memo_message", 
              "type" : "string", 
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["multipart_transfer"]
      },
      {
        "method_name": "wallet_transfer",
        "description": "Sends given amount to the given address, assumes shares in DAC.  This transfer will occur in a single transaction and will be cheaper, but may reduce your privacy.",
        "return_type": "signed_transaction",
        "parameters" : 
          [
            {
              "name" : "amount_to_transfer", 
              "type" : "real_amount", 
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol", 
              "type" : "asset_symbol", 
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name", 
              "type" : "sending_account_name", 
              "description" : "the source account(s) to draw the shares from"
            },
            {
              "name" : "to_account_name", 
              "type" : "receive_account_name", 
              "description" : "the account to transfer the shares to"
            },
            {
              "name" : "memo_message", 
              "type" : "string", 
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["transfer"]
      },
      {
        "method_name": "wallet_rescan_blockchain",
        "description": "Scans the blockchain history for operations relevant to this wallet.",
        "return_type": "void",
        "parameters" : 
          [
            {
              "name" : "first_block_number", 
              "type" : "uint32_t", 
              "description" : "the first block to scan",
              "default_value" : 0
            },
            {
              "name" : "num_blocks", 
              "type" : "uint32_t", 
              "description" : "the number of blocks to scan",
              "default_value" : -1
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["scan"]
      },
      {
        "method_name": "wallet_scan_transaction",
        "description": "Scans the specified transaction",
        "return_type": "void",
        "parameters" : 
          [
            {
              "name" : "block_num", 
              "type" : "uint32_t", 
              "description" : "the block containing the transaction"
            },
            {
              "name" : "transaction_id", 
              "type" : "string", 
              "description" : "the id (or id prefix) of the transaction"
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["scan_transaction"]
      },
      {
         "method_name" : "wallet_account_register",
         "description" : "Updates the data published about a given account",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "pay_from_account",
                  "type" : "account_name",
                  "description" : "the account from which fees will be paid"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "public data about the account",
                  "default_value" : null
               },
               {
                  "name" : "delegate_pay_rate",
                  "type" : "uint32_t",
                  "description" : "A value between 0 and 100 for delegates, 255 for non delegates",
                  "default_value" : 255
               }
            ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "register" ]
      },
      {
         "method_name" : "wallet_account_update_private_data",
         "description" : "Updates the local private data for an account",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "private_data",
                  "type" : "json_variant",
                  "description" : "private data about the account",
                  "default_value" : null
               }
            ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "update_private_data" ]
      },
      {
         "method_name" : "wallet_account_update_registration",
         "description" : "Updates the data published about a given account",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "pay_from_account",
                  "type" : "account_name",
                  "description" : "the account from which fees will be paid"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "public data about the account",
                  "default_value" : null
               },
               {
                  "name" : "delegate_pay_rate",
                  "type" : "uint8_t",
                  "description" : "delegate pay rate: 0 to 100 if updating or upgrading to a delegate, and 255 for a normal account",
                  "default_value" : 255
               },
               {
                  "name" : "new_active_key",
                  "type" : "string",
                  "description" : "update account's active key, or leave blank to leave current key in place",
                  "default_value" : ""
               }
            ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "update_registration" ]
      },
      {
         "method_name" : "wallet_list_accounts",
         "description" : "Lists all accounts associated with this wallet",
         "return_type" : "wallet_account_record_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_list_favorite_accounts",
         "description" : "Lists all accounts which have been marked as favorites.",
         "return_type" : "wallet_account_record_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_list_unregistered_accounts",
         "description" : "Lists all unregistered accounts belonging to this wallet",
         "return_type" : "wallet_account_record_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_list_my_accounts",
         "description" : "Lists all accounts for which we have a private key in this wallet",
         "return_type" : "wallet_account_record_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_get_account",
         "description" : "Get the account record for a given name",
         "return_type" : "wallet_account_record",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the account to retrieve"
               }
            ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_remove_contact_account",
         "description" : "Remove a contact account from your wallet",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the contact"
               }
            ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_account_rename",
         "description" : "Rename an account in wallet",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "current_account_name",
                  "type" : "account_name",
                  "description" : "the current name of the account"
               },
               {
                  "name" : "new_account_name",
                  "type" : "new_account_name",
                  "description" : "the new name for the account"
               }
            ],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["wallet_rename_account"]
      },
      {
         "method_name" : "wallet_asset_create",
         "description" : "Creates a new user issued asset",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for the new asset"
               },
               {
                  "name" : "asset_name",
                  "type" : "string",
                  "description" : "the name of the asset"
               },
               {
                  "name" : "issuer_name",
                  "type" : "string",
                  "description" : "the name of the issuer of the asset"
               },
               {
                  "name" : "description",
                  "type" : "string",
                  "description" : "a description of the asset",
                  "default_value" : ""
               },
               {
                  "name" : "data",
                  "type" : "json_variant",
                  "description" : "arbitrary data attached to the asset",
                  "default_value" : null
               },
               {
                  "name" : "maximum_share_supply",
                  "type" : "real_amount",
                  "description" : "the maximum number of shares of the asset",
                  "default_value" : 1000000000000000
               },
               {
                  "name" : "precision",
                  "type" : "int64_t",
                  "description" : "defines where the decimal should be displayed, must be a power of 10",
                  "default_value" : 1000000
               },
               {
                  "name" : "is_market_issued",
                  "type" : "bool",
                  "description" : "creation of a new BitAsset that is created by shorting",
                  "default_value": false
               }
            ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_asset_issue",
         "description" : "Issues new shares of a given asset type",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "amount",
                  "type" : "real_amount",
                  "description" : "the amount of shares to issue"
               },
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for asset"
               },
               {
                  "name" : "to_account_name",
                  "type" : "account_name",
                  "description" : "the name of the account to receive the shares"
               },
               {
                  "name" : "memo_message",
                  "type" : "string",
                  "description" : "the memo to send to the receiver",
                  "default_value": ""
               }
            ],
         "detailed_description" : "The asset being issued must have been created via wallet_asset_create in a previous block.",
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_submit_proposal",
         "description" : "Submit a proposal to the delegates for voting",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "delegate_account_name",
                  "type" : "account_name",
                  "description" : "the delegate account proposing the issue"
               },
               {
                  "name" : "subject",
                  "type" : "string",
                  "description" : "the subject of the proposal"
               },
               {
                  "name" : "body",
                  "type" : "string",
                  "description" : "the body of the proposal"
               },
               {
                  "name" : "proposal_type",
                  "type" : "string",
                  "description" : "the type of the proposal"
               },
               {
                  "name" : "data",
                  "type" : "json_variant",
                  "description" : "the name of the account to receive the shares"
               }
            ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_vote_proposal",
         "description" : "Vote on a proposal",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "name",
                  "type" : "account_name",
                  "description" : "the name of the account to vote with"
               },
               {
                  "name" : "proposal_id",
                  "type" : "proposal_id",
                  "description" : "the id of the proposal to vote on"
               },
               {
                  "name" : "vote",
                  "type" : "vote_type",
                  "description" : "your vote"
               },
               {
                  "name" : "message",
                  "type" : "string",
                  "description" : "comment to go along with vote",
                  "default_value" : ""
               }
            ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name"    : "wallet_account_balance",
         "description"    : "Lists the total asset balances for the specified account",
         "return_type"    : "account_balance_summary_type",
         "parameters"     : [
         {
            "name" : "account_name",
            "type" : "account_name",
            "description" : "the account to get a balance for, or leave empty for all accounts",
            "default_value" : ""
         }
         ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"],
         "aliases" : ["balance"]
      },
      {
         "method_name" : "wallet_account_list_public_keys",
         "description" : "Lists all public keys in this account",
         "return_type" : "public_key_summary_array",
         "parameters"  : [
           {
                "name" : "account_name",
                "type" : "account_name",
                "description" : "the account for which public keys should be listed",
                "default_value" : "*"
           }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases": ["public_keys"]
      },
      {
         "method_name"  : "wallet_delegate_withdraw_pay",
         "description"  : "Used to transfer some of the delegate's pay from their balance",
         "return_type"  : "signed_transaction",
         "parameters"   : [
            {
              "name" : "delegate_name",
              "type" : "account_name",
              "description" : "the delegate whose pay is being cashed out"
            },
            {
              "name" : "to_account_name",
              "type" : "account_name",
              "description" : "the account that should receive the funds"
            },
            {
               "name" : "amount_to_withdraw",
               "type" : "real_amount",
               "description" : "the amount to withdraw"
            },
            {
               "name" : "memo",
               "type" : "string",
               "description" : "memo to add to transaction",
               "default_value" : "payday"
      }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : ["pay_delegate"]
      },
      {
         "method_name"  : "wallet_set_priority_fee",
         "description"  : "Used to set the priority fee for new transactions. Return current fee if no parameter is provided.",
         "return_type"  : "asset",
         "parameters"   : [
         {
            "name" : "fee",
            "type" : "real_amount",
            "description" : "the wallet priority fee to be set",
            "default_value" : "0"
         }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["set_priority_fee"]
      },
      {
         "method_name" : "wallet_market_submit_bid",
         "description" : "Used to place a request to buy a quantity of assets at a price specified in another asset",
         "return_type" : "signed_transaction",
         "parameters"  : [
            {
               "name" : "from_account_name",
               "type" : "account_name",
               "description" : "the account that will provide funds for the bid"
            },
            {
               "name" : "quantity",
               "type" : "real_amount",
               "description" : "the quantity of items you would like to buy"
            },
            {
               "name" : "quantity_symbol",
               "type" : "asset_symbol",
               "description" : "the type of items you would like to buy"
            },
            {
               "name" : "quote_price",
               "type" : "real_amount",
               "description" : "the price you would like to pay"
            },
            {
               "name" : "quote_symbol",
               "type" : "asset_symbol",
               "description" : "the type of asset you would like to pay with"
            }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "bid" ]
      },
      {
         "method_name" : "wallet_market_submit_ask",
         "description" : "Used to place a request to sell a quantity of assets at a price specified in another asset",
         "return_type" : "signed_transaction",
         "parameters"  : [
            {
               "name" : "from_account_name",
               "type" : "account_name",
               "description" : "the account that will provide funds for the ask"
            },
            {
               "name" : "quantity",
               "type" : "real_amount",
               "description" : "the quantity of items you would like to sell"
            },
            {
               "name" : "quantity_symbol",
               "type" : "asset_symbol",
               "description" : "the type of items you would like to sell"
            },
            {
               "name" : "quote_price",
               "type" : "real_amount",
               "description" : "the price you would like to sell"
            },
            {
               "name" : "quote_symbol",
               "type" : "asset_symbol",
               "description" : "the type of asset you would like to be paid"
            }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "ask" ]
      },
      {
         "method_name" : "wallet_market_submit_short",
         "description" : "Used to place a request to short sell a quantity of assets at a price specified",
         "return_type" : "signed_transaction",
         "parameters"  : [
            {
               "name" : "from_account_name",
               "type" : "account_name",
               "description" : "the account that will provide funds for the ask"
            },
            {
               "name" : "quantity",
               "type" : "real_amount",
               "description" : "the quantity of items you would like to sell"
            },
            {
               "name" : "quote_price",
               "type" : "real_amount",
               "description" : "the price you would like to sell"
            },
            {
               "name" : "quote_symbol",
               "type" : "asset_symbol",
               "description" : "the type of asset you would like to be paid"
            }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "short" ]
      },
      {
         "method_name" : "wallet_market_cover",
         "description" : "Used to place a request to cover an existing short position",
         "return_type" : "signed_transaction",
         "parameters"  : [
            {
               "name" : "from_account_name",
               "type" : "account_name",
               "description" : "the account that will provide funds for the ask"
            },
            {
               "name" : "quantity",
               "type" : "real_amount",
               "description" : "the quantity of items you would like to cover"
            },
            {
               "name" : "quantity_symbol",
               "type" : "asset_symbol",
               "description" : "the type of asset you are covering (ie: USD)"
            },
            {
               "name" : "order_id",
               "type" : "address",
               "description" : "the order ID you would lick to cover"
            }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "cover" ]
      },
      {
         "method_name" : "wallet_market_order_list",
         "description" : "List an order list of a specific market",
         "return_type" : "market_order_array",
         "parameters"  : [
            {
               "name" : "quote_symbol",
               "type" : "asset_symbol",
               "description" : "the quote symbol of the market"
            },
            {
               "name" : "base_symbol",
               "type" : "asset_symbol",
               "description" : "the base symbol of the market"
            },
            {
               "name" : "limit",
               "type" : "int64_t",
               "description" : "the maximum number of items to return",
               "default_value" : -1
            }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases" : [ "list_orders" ]
      },
      {
         "method_name" : "wallet_market_cancel_order",
         "description" : "Cancel an order",
         "return_type" : "signed_transaction",
         "parameters"  : [
            {
               "name" : "order_id",
               "type" : "address",
               "description" : "the address of the order to cancel"
            }
          ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "cancel_order" ]
      },
      {
         "method_name" : "wallet_dump_private_key",
         "description" : "Reveals the private key corresponding to an address or public key",
         "return_type"  : "string",
         "parameters" : [
         {
            "name" : "address_or_public_key",
            "type" : "string",
            "description" : "a public key or address (based on hash of public key) of the private key"
         }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "dump_private_key" ]
      },
      {
         "method_name" : "wallet_account_vote_summary",
         "description" : "Returns the allocation of votes by this account",
         "return_type" : "account_vote_summary",
         "parameters"  : [
            {
                "name" :  "account_name",
                "type" : "account_name",
                "description" : "the account to report votes on, or empty for all accounts",
                "default_value" : ""
            }
          ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"],
         "aliases" : ["votes"]
      },
      {
         "method_name" : "wallet_account_export_private_key",
         "description" : "returns the private key for this account in WIF format",
         "return_type" : "string",
         "parameters"  : [{"name" : "account_name", "type":"account_name", "description": "the name of the account key to export"}],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_set_setting",
         "description" : "Set a property in the GUI settings DB",
         "return_type" : "void",
         "parameters"  : [
            {
                "name" : "name",
                "type" : "string",
                "description" : "the name of the setting to set"
            },
            {
                "name" : "value",
                "type" : "variant",
                "description" : "the value to set the setting to"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_get_setting",
         "description" : "Get the value of the given setting",
         "return_type" : "optional_variant",
         "parameters"  : [
            {
                "name" : "name",
                "type" : "string",
                "description" : "The name of the setting to fetch"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_delegate_set_block_production",
         "description" : "Enable or disable block production for a particular delegate account",
         "return_type" : "void",
         "parameters"  : [
            {
                "name" : "delegate_name",
                "type" : "string",
                "description" : "The delegate to enable/disable block production for; ALL for all delegate accounts"
            },
            {
                "name" : "enabled",
                "type" : "bool",
                "description" : "true to enable block production, false otherwise"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_delegate_set_transaction_scanning",
         "description" : "Enable or disable wallet transaction scanning",
         "return_type" : "void",
         "parameters"  : [
            {
                "name" : "enabled",
                "type" : "bool",
                "description" : "true to enable transaction scanning, false otherwise"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_sign_hash",
         "description" : "Signs the provided message digest with the account key",
         "return_type" : "compact_signature",
         "parameters"  : [
            {
                "name" : "signing_account",
                "type" : "string",
                "description" : "Name of the account to sign the message with"
            },
            {
                "name" : "hash",
                "type" : "sha256",
                "description" : "SHA256 digest of the message to sign"
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_login_start",
         "description" : "Initiates the login procedure by providing a BitShares Login URL",
         "return_type" : "string",
         "parameters"  : [
            {
                "name" : "server_account",
                "type" : "string",
                "description" : "Name of the account of the server. The user will be shown this name as the site he is logging into."
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_login_finish",
         "description" : "Completes the login procedure by finding the user's public account key and shared secret",
         "return_type" : "variant",
         "parameters"  : [
            {
                "name" : "server_key",
                "type" : "public_key",
                "description" : "The one-time public key from wallet_login_start."
            },
            {
                "name" : "client_key",
                "type" : "public_key",
                "description" : "The client's one-time public key."
            },
            {
                "name" : "client_signature",
                "type" : "compact_signature",
                "description" : "The client's signature of the shared secret."
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      }
    ]
}
